#!/usr/bin/env python
import os
import json
import base64
import asyncio
import aiohttp  # Use aiohttp instead of websockets for OpenAI connection
from fastapi import FastAPI, WebSocket, Request
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.websockets import WebSocketDisconnect
from twilio.twiml.voice_response import VoiceResponse, Connect, Say, Stream
from dotenv import load_dotenv

load_dotenv()

# Configuration
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
PORT = int(os.getenv('PORT', 10000))  # Use the Render port
SYSTEM_MESSAGE = """
ุชุญุฏุซ ุจุงูุนุฑุจูุฉ ุงููุตุญู ุจููุฌุฉ ุณุนูุฏูุฉ. ูุง ุชุณุชุฎุฏู ููุฌุงุช ูุตุฑูุฉ ุฃู ุบูุฑูุง.
ุฃูุช ูุณุงุนุฏ ุตูุชู ุงูุชุฑุงุถู ุชุงุจุน ููุฏููุฉ ุงูููู ุนุจุฏุงูุนุฒูุฒ ููุนููู ูุงูุชูููุฉ (ูุงูุณุช)ุ ูุชุนูู ูุฃูู ููุธู ูุฑูุฒ ุงุชุตุงู ุณุนูุฏู.

๐ ุงุณุชุฎุฏู ุนุจุงุฑุงุช ูุฃูููุฉ ูู ุงูููููุฉ ูุซู:
- ููุง ูุณููุง
- ุฃุจุดุฑ
- ููู ุฃูุฏุฑ ุฃุณุงุนุฏู
- ูุนุทูู ุงูุนุงููุฉ
- ุชูุถู
- ุดูุฑุงู ุฌุฒููุงู
- ูุน ุงูุณูุงูุฉ

๐ ูุฏูู ููุณู ุจุนุฏ ุงูุชุญูุฉ:
- ููุง ูุณููุง! ูุนู ุฃุญูุฏ ูู ูุฑูุฒ ุงุชุตุงู ูุงูุณุชุ ุงููุณุงุนุฏ ุงูุฐูู. ููู ุฃูุฏุฑ ุฃุณุงุนุฏู ุงููููุ

โ ุญุงูุธ ุนูู ุงูุฃุณููุจ ุงููููู ููุง ุชุณุชุฎุฏู ููุฌุฉ ุดุฎุตูุฉ ุฃู ูุฑูุจุฉ ุจุดูู ูุจุงูุบ.

๐ ูุจุฐุฉ ุชุนุฑูููุฉ ุนู ูุงูุณุช:
ูุฏููุฉ ุงูููู ุนุจุฏุงูุนุฒูุฒ ููุนููู ูุงูุชูููุฉ "ูุงูุณุช" ุชุคุฏู ุฏูุฑูุง ุงูุญููู ูู ุฅุซุฑุงุก ููุธููุฉ ุงูุจุญุซ ูุงูุชุทููุฑ ูุงูุงุจุชูุงุฑ ููููุง ุงููุฎุชุจุฑ ุงููุทูู ููุงุญุฉ ููุงุจุชูุงุฑุ ูุงููุญุฑู ุงูุฃุณุงุณู ููุทุงุน ุงูุจุญุซ ูุงูุชุทููุฑ ูุงูุงุจุชูุงุฑุ ูุงูุฌูุฉ ุงูุชููููุฉ ุงููุฑุฌุนูุฉ ููุฌููุงุช ุงูุญูููููุฉ ูุงููุทุงุน ุงูุฎุงุต ูู ุงูููููุฉ.

ุชููู ุจุฅุฌุฑุงุก ุงูุจุญูุซ ุงูุนูููุฉ ูุงูุชุทุจูููุฉุ ูุชุณุฑูุน ุงูุชุทููุฑ ุงูุชูููุ ูุชูุทูู ุงูุชูููุงุช ุงููุงุดุฆุฉุ ูุจูุงุก ุงููุฏุฑุงุช ุงููุทููุฉุ ูุชุนุฒูุฒ ุงูุชูููุฉ ุงููุณุชุฏุงูุฉ.

ุชุดูู ูุฌุงูุงุชูุง:
- ุงูุตุญุฉ
- ุงูุจูุฆุฉ ูุงูุงุณุชุฏุงูุฉ
- ุงูุทุงูุฉ ูุงูุตูุงุนุฉ
- ุงูุชุตุงุฏูุงุช ุงููุณุชูุจู

ุฅุฐุง ุณุฃู ุงููุชุตู ุนู ุฃู ูู ูุฐูุ ุฃุฌุจ ุจุซูุฉ ููุถูุญุ ูุฅุฐุง ูู ุชูู ูุชุฃูุฏูุงุ ูุงุนุชุฐุฑ ุจูุทู ููุฌูู ุฅูู:  
๐ ุงููููุน: https://www.kacst.gov.sa  
๐ง ุงูุจุฑูุฏ: media@kacst.gov.sa  
๐ ุงููุงุชู: 0114883555

๐ ุฅุฐุง ุณุฃู ุงููุชุตู ุนู "ุนูุฏู ูุดุฑูุน" ุฃู "ุนูุฏู ููุฑุฉ" ุฃู "ุงุญุชุงุฌ ุฏุนู":
ุงุดูุฑู ุนูู ุงูุชูุงููุ ููู ูู: "ุฃููุฏุ ูุฑุญุจ ุฏุงุฆููุง ุจุงูุฃููุงุฑ ูุงููุดุงุฑูุน ุงูุฌุฏูุฏุฉ. ุชูุฏุฑ ุชุฑุณู ููุฑุชู ุฃู ุทูุจู ูุจุงุดุฑุฉ ุนูู ุงูุจุฑูุฏ: media@kacst.gov.sa ุฃู ุชุฒูุฑ ุงููููุน https://www.kacst.gov.sa ููุฒูุฏ ูู ุงููุนูููุงุช."

๐ ุฅุฐุง ุณุฃู ุนู "ุจุฑูุงูุฌ ุชุนุงููู" ุฃู "ุชุฏุฑูุจ ุชุนุงููู" ุฃู ุฃู ุตูุบุฉ ูุดุงุจูุฉ:
ูู ูู: "ุจุงููุณุจุฉ ููุชุฏุฑูุจ ุงูุชุนุงูููุ ูุงูุณุช ุชุณุชูุจู ุทูุจุงุช ุงูุชุฏุฑูุจ ุญุณุจ ุงูุฅููุงููุฉ ูุงูุชุฎุตุต. ููุตูู ุจุฅุฑุณุงู ุทูุจู ุนูู ุงูุจุฑูุฏ ุงูุฑุณูู: media@kacst.gov.sa ูุน ุฐูุฑ ุงูุชุฎุตุต ูุงูุฌุงูุนุฉุ ูุฅู ุดุงุก ุงููู ูุชู ุงููุธุฑ ููู."

๐ ุฅุฐุง ุณุฃู ุนู ุฏุนู ุงูุทูุงุจ ุฃู ุจุฑุงูุฌ ููุทูุจุฉ:
ูู ูู: "ูุงูุณุช ุชูุชู ูุซูุฑ ุจุงูุทูุจุฉ ูุชูุฏู ูุฑุต ููุจุงุฏุฑุงุช ุชุนููููุฉ. ุชูุฏุฑ ุชุชุงุจุน ุฌุฏูุฏ ุงูุจุฑุงูุฌ ูู ุฎูุงู ุงููููุน https://www.kacst.gov.sa ุฃู ุชุชูุงุตู ูุนูุง ุนุจุฑ ุงูุจุฑูุฏ: media@kacst.gov.sa."

๐ ุฅุฐุง ูุงู ุงููุชุตู: "ุญูููู ูุฃุญุฏ" ุฃู "ุฃุจุบู ุฃููู ุดุฎุต" ุฃู "ุญููู ุงูููุงููุฉ":
ุฑุฏ ุนููู ุจูุทู ููู: "ุฃูุง ูุณุงุนุฏ ุตูุชู ุฐูู ููุง ูููููู ุชุญููู ุงูููุงููุฉ ูุจุงุดุฑุฉุ ููู ุชูุฏุฑ ุชุชูุงุตู ูุนูุง ุนุจุฑ ุงููุงุชู ุนูู ุงูุฑูู: 0114883555 ุฃู ุชุฑุณู ุงุณุชูุณุงุฑู ุนุจุฑ ุงูุจุฑูุฏ: media@kacst.gov.saุ ูุฅู ุดุงุก ุงููู ูุชู ุฎุฏูุชู."

๐ ุฅุฐุง ูุงู ุงููุชุตู: "ุดูุฑุงู" ุฃู "ูุน ุงูุณูุงูุฉ" ุฃู "ุฎูุงุต":
ูู ูู: "ูุนุทูู ุงูุนุงููุฉ! ูุน ุงูุณูุงูุฉ ููุชููู ูู ููู ุณุนูุฏ ๐"
"""
VOICE = 'shimmer'  # Changed from 'sage' to 'shimmer' as requested
LOG_EVENT_TYPES = [
    'error', 'response.content.done', 'rate_limits.updated',
    'response.done', 'input_audio_buffer.committed',
    'input_audio_buffer.speech_stopped', 'input_audio_buffer.speech_started',
    'session.created'
]

app = FastAPI()

if not OPENAI_API_KEY:
    raise ValueError('Missing the OpenAI API key. Please set it in the .env file.')

# Updated function to detect response style based on user question
def detect_response_style(user_text):
    if any(word in user_text for word in ["ูุธููุฉ", "ุชูุธูู", "ุชูุฏูู", "ูุฑุต ุนูู"]):
        return "ุฑุณูู"
    elif any(word in user_text for word in ["ุชุฏุฑูุจ ุชุนุงููู", "ุจุฑูุงูุฌ ุชุนุงููู", "ูุฑุตุฉ ุชุฏุฑูุจ", "ุชุนุงูู ุฃูุงุฏููู"]):
        return "ุชุฏุฑูุจ ุชุนุงููู"
    elif any(word in user_text for word in ["ูููุนูู", "ุฑูู", "ุจุฑูุฏ", "ุชูุงุตู", "ุนููุงู"]):
        return "ูุนูููุงุช ุงุชุตุงู"
    elif any(word in user_text for word in ["ูุงูุณุช", "ูุง ูู", "ูุด ูุงูุณุช", "ุชุนุฑูู"]):
        return "ุชุนุฑููู"
    elif any(word in user_text for word in ["ูุดุฑูุน", "ุนูุฏู ูุดุฑูุน", "ุฃุจุบู ุฏุนู", "ููู ุฃูุฏู ุนูู ุฏุนู", "ุนูุฏู ููุฑุฉ"]):
        return "ุฏุนู ูุดุงุฑูุน"
    elif any(word in user_text for word in ["ุงุจุชูุงุฑ", "ุฃููุงุฑ ุฌุฏูุฏุฉ", "ุญููู ูุจุชูุฑุฉ"]):
        return "ุงุจุชูุงุฑ"
    elif any(word in user_text for word in ["ุทูุงุจ", "ุจุฑูุงูุฌ ููุทูุงุจ", "ุฏุนู ุงูุทูุงุจ", "ุทูุจุฉ", "ูุฑุตุฉ ุทูุงุจูุฉ", "ุฃุญุชุงุฌ ุฏุนู ุฏุฑุงุณู"]):
        return "ุฏุนู ุทูุงุจ"
    elif any(word in user_text for word in ["ุญูููู", "ุฃุจุบู ุฃููู ุดุฎุต", "ุญููู ุงูููุงููุฉ", "ุญูู ุงูููุงููุฉ"]):
        return "ุทูุจ ุชุญููู"
    elif any(word in user_text for word in ["ุดูุฑุงู", "ุฎูุงุต", "ูุน ุงูุณูุงูุฉ"]):
        return "ูุฏุงุน"
    else:
        return "ุนุงู"

@app.get("/", response_class=JSONResponse)
async def index_page():
    return {"message": "Arabic Voice Assistant is running!"}

@app.api_route("/incoming-call", methods=["GET", "POST"])
async def handle_incoming_call(request: Request):
    """Handle incoming call and return TwiML response to connect to Media Stream."""
    response = VoiceResponse()
    # Arabic greeting
    response.say("ูุฑุญุจุงูุ ุฌุงุฑู ุชูุตููู ุจุงููุณุงุนุฏ ุงูุตูุชู ุงูุฐูู")
    response.pause(length=1)
    response.say("ููููู ุงูุจุฏุก ุจุงูุชุญุฏุซ ุงูุขู")
    host = request.url.hostname
    connect = Connect()
    connect.stream(url=f'wss://{host}/media-stream')
    response.append(connect)
    return HTMLResponse(content=str(response), media_type="application/xml")

@app.websocket("/media-stream")
async def handle_media_stream(websocket: WebSocket):
    """Handle WebSocket connections between Twilio and OpenAI."""
    print("Client connected")
    await websocket.accept()

    # Use aiohttp for the OpenAI connection
    headers = {
        "Authorization": f"Bearer {OPENAI_API_KEY}",
        "OpenAI-Beta": "realtime=v1"
    }
    
    async with aiohttp.ClientSession() as session:
        async with session.ws_connect(
            'wss://api.openai.com/v1/realtime?model=gpt-4o-realtime-preview-2024-10-01',
            headers=headers
        ) as openai_ws:
            # Connection specific state
            stream_sid = None
            latest_media_timestamp = 0
            last_assistant_item = None
            mark_queue = []
            response_start_timestamp_twilio = None
            user_question = ""  # Add variable to store user's speech
            
            # Initialize session
            await initialize_session(openai_ws)
            
            async def receive_from_twilio():
                """Receive audio data from Twilio and send it to the OpenAI Realtime API."""
                nonlocal stream_sid, latest_media_timestamp, user_question
                try:
                    async for message in websocket.iter_text():
                        data = json.loads(message)
                        if data['event'] == 'media':
                            latest_media_timestamp = int(data['media']['timestamp']) if 'timestamp' in data['media'] else 0
                            audio_append = {
                                "type": "input_audio_buffer.append",
                                "audio": data['media']['payload']
                            }
                            await openai_ws.send_str(json.dumps(audio_append))
                        elif data['event'] == 'start':
                            stream_sid = data['start']['streamSid']
                            print(f"Incoming stream has started {stream_sid}")
                            response_start_timestamp_twilio = None
                            latest_media_timestamp = 0
                            last_assistant_item = None
                            user_question = ""  # Reset user question for new call
                        elif data['event'] == 'mark':
                            if mark_queue:
                                mark_queue.pop(0)
                except WebSocketDisconnect:
                    print("Client disconnected.")

            async def send_to_twilio():
                """Receive events from the OpenAI Realtime API, send audio back to Twilio."""
                nonlocal stream_sid, last_assistant_item, response_start_timestamp_twilio, user_question
                try:
                    async for msg in openai_ws:
                        if msg.type == aiohttp.WSMsgType.TEXT:
                            response = json.loads(msg.data)
                            if response['type'] in LOG_EVENT_TYPES:
                                print(f"Received event: {response['type']}", response)

                            # Capture user's speech text to analyze for response style
                            if response.get('type') == 'response.content.delta' and 'delta' in response:
                                if response.get('content_block', {}).get('type') == 'user_input' and 'delta' in response:
                                    user_question += response['delta']
                                    
                                    # When we get a complete user question, update the session with appropriate style
                                    if response.get('content_block', {}).get('index') == 0 and response.get('content_block', {}).get('is_completed', False):
                                        style = detect_response_style(user_question)
                                        await update_session_style(openai_ws, style)

                            if response.get('type') == 'response.audio.delta' and 'delta' in response:
                                audio_payload = base64.b64encode(base64.b64decode(response['delta'])).decode('utf-8')
                                audio_delta = {
                                    "event": "media",
                                    "streamSid": stream_sid,
                                    "media": {
                                        "payload": audio_payload
                                    }
                                }
                                await websocket.send_json(audio_delta)

                                if response_start_timestamp_twilio is None:
                                    response_start_timestamp_twilio = latest_media_timestamp

                                # Update last_assistant_item safely
                                if response.get('item_id'):
                                    last_assistant_item = response['item_id']

                                await send_mark(websocket, stream_sid)

                            # Handle speech interruption
                            if response.get('type') == 'input_audio_buffer.speech_started':
                                print("Speech started detected.")
                                if last_assistant_item:
                                    print(f"Interrupting response with id: {last_assistant_item}")
                                    await handle_speech_started_event()
                except Exception as e:
                    print(f"Error in send_to_twilio: {e}")

            async def handle_speech_started_event():
                """Handle interruption when the caller's speech starts."""
                nonlocal response_start_timestamp_twilio, last_assistant_item
                print("Handling speech started event.")
                if mark_queue and response_start_timestamp_twilio is not None:
                    elapsed_time = latest_media_timestamp - response_start_timestamp_twilio

                    if last_assistant_item:
                        truncate_event = {
                            "type": "conversation.item.truncate",
                            "item_id": last_assistant_item,
                            "content_index": 0,
                            "audio_end_ms": elapsed_time
                        }
                        await openai_ws.send_str(json.dumps(truncate_event))

                    await websocket.send_json({
                        "event": "clear",
                        "streamSid": stream_sid
                    })

                    mark_queue.clear()
                    last_assistant_item = None
                    response_start_timestamp_twilio = None

            async def send_mark(connection, stream_sid):
                if stream_sid:
                    mark_event = {
                        "event": "mark",
                        "streamSid": stream_sid,
                        "mark": {"name": "responsePart"}
                    }
                    await connection.send_json(mark_event)
                    mark_queue.append('responsePart')

            # New function to update session based on detected style
            async def update_session_style(openai_ws, style):
                # Set style prompt based on detected style
                if style == "ุฑุณูู":
                    style_prompt = "ุงุณุชุฎุฏู ุฃุณููุจ ุฑุณูู ูููููุ ููุฏู ุงูุฑุฏ ุจุทุฑููุฉ ุฏูููุฉ ููุจูุฉ."
                elif style == "ุชููู":
                    style_prompt = "ุงุดุฑุญ ุจุดูู ุชููู ูุฏูููุ ูุน ุฃูุซูุฉ ุฅุฐุง ุฃููู."
                elif style == "ูุนูููุงุช ุงุชุตุงู":
                    style_prompt = "ูุฏูู ูุนูููุงุช ุงูุชูุงุตู ุจูุถูุญ ุชุงู ููุจุงูุฉ."
                elif style == "ุชุนุฑููู":
                    style_prompt = "ูุฏูู ุชุนุฑูููุง ูุจุณุทูุง ููุงูุณุชุ ูุน ุฃูู ูุง ูููุฒูุง."
                elif style == "ุฏุนู ูุดุงุฑูุน":
                    style_prompt = "ูุฏู ูุนูููุงุช ุนู ููููุฉ ุชูุฏูู ุงููุดุงุฑูุน ูุงูุฃููุงุฑ ููุฏุนู ูู ูุงูุณุช."
                elif style == "ุงุจุชูุงุฑ":
                    style_prompt = "ูุฏู ูุนูููุงุช ุนู ุจุฑุงูุฌ ุงูุงุจุชูุงุฑ ูุฏุนู ุงูุฃููุงุฑ ุงูุฅุจุฏุงุนูุฉ ูู ูุงูุณุช."
                elif style == "ุฏุนู ุทูุงุจ":
                    style_prompt = "ูุฏู ูุนูููุงุช ุนู ุจุฑุงูุฌ ุฏุนู ุงูุทูุงุจ ูุงููุฑุต ุงูุชุนููููุฉ ูู ูุงูุณุช."
                elif style == "ุชุฏุฑูุจ ุชุนุงููู":
                    style_prompt = "ูุฏู ูุนูููุงุช ุฏูููุฉ ุนู ุจุฑุงูุฌ ุงูุชุฏุฑูุจ ุงูุชุนุงููู ูููููุฉ ุงูุชูุฏูู ุนูููุง."
                elif style == "ุทูุจ ุชุญููู":
                    style_prompt = "ูุถุญ ุจูุทู ุฃูู ูุณุงุนุฏ ุตูุชู ููุฏู ุทุฑู ุงูุชูุงุตู ุงูุจุฏููุฉ."
                elif style == "ูุฏุงุน":
                    style_prompt = "ูุฏู ุนุจุงุฑุงุช ุงููุฏุงุน ุงูููุงุณุจุฉ ุจูุทู ูุชุฑุญูุจ."
                else:
                    style_prompt = "ูู ูุฏููุง ููุทูููุงุ ููุฏู ุฅุฌุงุจุงุช ุนุงูุฉ ุจุทุฑููุฉ ุณููุฉ ุงูููู."
                
                # Update the session with the appropriate style
                session_update = {
                    "type": "session.update",
                    "session": {
                        "turn_detection": {"type": "server_vad"},
                        "input_audio_format": "g711_ulaw",
                        "output_audio_format": "g711_ulaw",
                        "voice": VOICE,
                        "modalities": ["text", "audio"],
                        "temperature": 0.7,
                        "instructions": f"""
{style_prompt}

{SYSTEM_MESSAGE}
""",
                    }
                }
                print(f"Updating session with style: {style}")
                await openai_ws.send_str(json.dumps(session_update))

            await asyncio.gather(receive_from_twilio(), send_to_twilio())

async def initialize_session(openai_ws):
    """Control initial session with OpenAI."""
    session_update = {
        "type": "session.update",
        "session": {
            "turn_detection": {"type": "server_vad"},
            "input_audio_format": "g711_ulaw",
            "output_audio_format": "g711_ulaw",
            "voice": VOICE,
            "instructions": SYSTEM_MESSAGE,
            "modalities": ["text", "audio"],
            "temperature": 0.7,
        }
    }
    print('Sending session update:', json.dumps(session_update))
    await openai_ws.send_str(json.dumps(session_update))

    # Have the AI speak first with an updated Saudi greeting
    await send_initial_conversation_item(openai_ws)

async def send_initial_conversation_item(openai_ws):
    """Send initial conversation item for AI to greet in Saudi Arabic style."""
    initial_conversation_item = {
        "type": "conversation.item.create",
        "item": {
            "type": "message",
            "role": "user",
            "content": [
                {
                    "type": "input_text",
                    "text": (
                        "ุงุจุฏุฃ ุงููุญุงุฏุซุฉ ุจุชุฑุญูุจ ุทุจูุนู ูุดุจู ููุธู ูุฑูุฒ ุงูุงุชุตุงูุ ููู:\n"
                        "ููุง ูุณููุง! ูุนู ุฃุญูุฏ ูู ูุฑูุฒ ุงุชุตุงู ูุงูุณุชุ ุงููุณุงุนุฏ ุงูุฐูู. ููู ุฃูุฏุฑ ุฃุณุงุนุฏู ุงููููุ"
                    )
                }
            ]
        }
    }
    await openai_ws.send_str(json.dumps(initial_conversation_item))
    await openai_ws.send_str(json.dumps({"type": "response.create"}))

if __name__ == "__main__":
    import uvicorn
    print(f"โ Arabic voice assistant is running on port {PORT}")
    uvicorn.run(app, host="0.0.0.0", port=PORT)
